(self.webpackChunkcheminfo_eln=self.webpackChunkcheminfo_eln||[]).push([[8065],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return u},kt:function(){return m}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),s=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(p.Provider,{value:r},e.children)},l={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=s(t),m=o,d=f["".concat(p,".").concat(m)]||f[m]||l[m]||i;return t?n.createElement(d,a(a({ref:r},u),{},{components:t})):n.createElement(d,a({ref:r},u))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=f;var c={};for(var p in r)hasOwnProperty.call(r,p)&&(c[p]=r[p]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=t[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6794:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return a},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var n=t(2122),o=t(9756),i=(t(7294),t(3905)),a={},c={unversionedId:"spectra/ir/process-compare/autoPeakPicking/index",id:"spectra/ir/process-compare/autoPeakPicking/index",isDocsHomePage:!1,title:"index",description:"Auto peak picking",source:"@site/docs/spectra/ir/process-compare/autoPeakPicking/index.md",sourceDirName:"spectra/ir/process-compare/autoPeakPicking",slug:"/spectra/ir/process-compare/autoPeakPicking/index",permalink:"/docs/spectra/ir/process-compare/autoPeakPicking/index",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/spectra/ir/process-compare/autoPeakPicking/index.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"README",permalink:"/docs/spectra/ir/process-compare/README"},next:{title:"index",permalink:"/docs/spectra/ir/process-compare/peakPicking/index"}},p=[{value:"Auto peak picking",id:"auto-peak-picking",children:[]}],s={toc:p};function u(e){var r=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"auto-peak-picking"},"Auto peak picking"),(0,i.kt)("p",null,"Auto peak picking is based on the Savitzky Golay filter."),(0,i.kt)("p",null,"It allows to find all the peak between 2 wavelengths (from / to) that has a ratio\nsignal to noise over a defined limit (Noise level)."))}u.isMDXComponent=!0}}]);